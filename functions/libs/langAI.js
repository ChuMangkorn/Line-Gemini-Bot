const { GoogleGenerativeAI } = require('@google/generative-ai');
const { defineSecret } = require('firebase-functions/params');
const admin = require('firebase-admin');
const moment = require('moment-timezone');
const WeatherService = require('./weatherService');
const MultimodalProcessor = require('./multimodal');

const geminiApiKey = defineSecret('GEMINI_API_KEY');

class LangAI {
  constructor() {
    console.log('ü§ñ ‡πÄ‡∏•‡πâ‡∏á AI initializing...');
    
    try {
      this.genAI = new GoogleGenerativeAI(geminiApiKey.value());
      this.model = this.genAI.getGenerativeModel({ model: 'gemini-2.0-flash' });
      console.log('‚úÖ Gemini API connected successfully');
    } catch (error) {
      console.error('‚ùå Gemini API connection failed:', error);
      this.model = null;
    }

    this.db = admin.firestore();
    
    this.weatherService = new WeatherService();
    this.multimodal = new MultimodalProcessor();

    this.getSystemPrompt = () => {
      const currentTime = moment().tz('Asia/Tokyo').format('YYYY-MM-DD HH:mm:ss JST');
      const currentDate = moment().tz('Asia/Tokyo').format('dddd, MMMM Do YYYY');
      
      return `‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ "‡πÄ‡∏•‡πâ‡∏á" AI ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏ô LINE

‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ${currentDate}, ${currentTime}

‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:
- ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ‡πÄ‡∏™‡∏µ‡∏¢‡∏á ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ ‡πÅ‡∏•‡∏∞‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
- ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏® (‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏±‡∏Å)
- ‡πÅ‡∏õ‡∏•‡∏†‡∏≤‡∏©‡∏≤
- ‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤
- ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
- ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
- ‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤
- ‡πÅ‡∏•‡∏∞‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏≠‡∏µ‡∏Å‡∏°‡∏≤‡∏Å‡∏°‡∏≤‡∏¢

‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û:
- ‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£ ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
- ‡∏ï‡∏≠‡∏ö‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå
- ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å
- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
- ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ñ‡∏≤‡∏°

‡∏à‡∏≥‡πÑ‡∏ß‡πâ‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏î‡∏à‡∏≥‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á‡∏°‡∏≤`;
    };

    console.log('‚úÖ ‡πÄ‡∏•‡πâ‡∏á AI ready!');
  }

  // Smart Query Type Detection
  detectQueryType(message) {
    const lowerMessage = message.toLowerCase();
    
    if (this.isWeeklyWeatherQuery(message)) return 'weekly_weather';
    if (this.isDetailedWeatherQuery(message)) return 'detailed_weather';
    if (this.isWeatherQuery(message)) return 'current_weather';
    if (this.isTimeQuery(message)) return 'time_query';
    
    return 'general';
  }

  // Enhanced Text Message Processing
  async processTextMessage(message, userId) {
    console.log(`Processing message: "${message}" from user: ${userId}`);
    
    try {
      const queryType = this.detectQueryType(message);
      
      switch (queryType) {
        case 'weekly_weather':
          const weeklyResponse = await this.weatherService.getWeeklyForecast(message);
          const validatedWeekly = this.validateResponse(weeklyResponse, '‡πÅ‡∏™‡∏î‡∏á‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå');
          await this.saveConversationContext(userId, message, '‡πÅ‡∏™‡∏î‡∏á‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡πÅ‡∏ö‡∏ö Professional UI');
          return validatedWeekly;

        case 'detailed_weather':
          const detailedResponse = await this.getDetailedForecast(message);
          const validatedDetailed = this.validateResponse(detailedResponse, '‡πÅ‡∏™‡∏î‡∏á‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î');
          await this.saveConversationContext(userId, message, '‡πÅ‡∏™‡∏î‡∏á‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏ö‡∏ö Professional UI');
          return validatedDetailed;

        case 'current_weather':
          const weatherResponse = await this.weatherService.getWeatherInfo(message);
          const validatedWeather = this.validateResponse(weatherResponse, '‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®');
          await this.saveConversationContext(userId, message, '‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÅ‡∏ö‡∏ö Professional UI');
          return validatedWeather;

        case 'time_query':
          const timeResponse = this.createProfessionalTimeMessage();
          return this.validateResponse(timeResponse, '‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô');

        case 'general':
        default:
          return await this.processGeneralQuery(message, userId);
      }

    } catch (error) {
      console.error('Text processing error:', error);
      return {
        type: 'text',
        text: '‚ùå ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏•‡πâ‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ'
      };
    }
  }

  // General Query Processing
  async processGeneralQuery(message, userId) {
    try {
      const context = await this.getConversationContext(userId);
      const fileContext = await this.getFileContext(userId);

      let prompt = this.getSystemPrompt() + `\n\n‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${message}`;

      if (context) {
        prompt += `\n\n‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ (5 ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î): ${context}`;
      }

      if (fileContext) {
        prompt += `\n\n‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á: ${fileContext.description}`;
      }

      if (this.model) {
        const result = await this.model.generateContent(prompt);
        const response = result.response.text();

        await this.saveConversationContext(userId, message, response);

        return {
          type: 'text',
          text: response
        };
      } else {
        const fallbackResponse = `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ú‡∏° ‡πÄ‡∏•‡πâ‡∏á AI ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "${message}" ‡πÅ‡∏•‡πâ‡∏ß ü§ñ

${this.getCurrentTimeInfo()}

‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡∏£‡∏∞‡∏ö‡∏ö AI ‡∏´‡∏•‡∏±‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° ‡πÅ‡∏ï‡πà‡∏ú‡∏°‡∏¢‡∏±‡∏á‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ:
‚úÖ ‡∏£‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
‚úÖ ‡∏à‡∏î‡∏à‡∏≥‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤
‚úÖ ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®

${context ? '\nüìù ‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤: ' + context : ''}

‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏î‡∏π‡∏Ñ‡∏£‡∏±‡∏ö!`;

        await this.saveConversationContext(userId, message, fallbackResponse);

        return {
          type: 'text',
          text: fallbackResponse
        };
      }

    } catch (error) {
      console.error('General query processing error:', error);
      return {
        type: 'text',
        text: '‚ùå ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏•‡πâ‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ'
      };
    }
  }

  // Detailed Weather Forecast
  async getDetailedForecast(query) {
    try {
      const city = this.weatherService.extractCityFromQuery(query);

      if (!city) {
        return '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏® ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö';
      }

      console.log(`Getting DETAILED weather for ${city.name}`);

      const forecast = await this.weatherService.fetchWeeklyForecastData(city.lat, city.lon);
      
      return this.weatherService.formatDetailedForecast(forecast, city.name);
      
    } catch (error) {
      console.error('Detailed weather service error:', error);
      return `‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÑ‡∏î‡πâ: ${error.message}`;
    }
  }

  // Professional Time Message
  createProfessionalTimeMessage() {
    const jstTime = moment().tz('Asia/Tokyo');
    const thaiTime = moment().tz('Asia/Bangkok');
    
    return {
      type: 'flex',
      altText: '‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô',
      contents: {
        type: 'bubble',
        header: {
          type: 'box',
          layout: 'vertical',
          contents: [
            {
              type: 'text',
              text: 'üïê ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô',
              weight: 'bold',
              size: '2xl',
              color: '#ffffff'
            }
          ],
          backgroundColor: '#667eea',
          paddingAll: '24px'
        },
        body: {
          type: 'box',
          layout: 'vertical',
          contents: [
            {
              type: 'box',
              layout: 'horizontal',
              contents: [
                {
                  type: 'text',
                  text: 'üáØüáµ',
                  size: '3xl',
                  flex: 0
                },
                {
                  type: 'box',
                  layout: 'vertical',
                  contents: [
                    {
                      type: 'text',
                      text: '‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô (JST)',
                      weight: 'bold',
                      size: 'lg',
                      color: '#333333'
                    },
                    {
                      type: 'text',
                      text: jstTime.format('HH:mm:ss'),
                      size: '4xl',
                      weight: 'bold',
                      color: '#667eea'
                    },
                    {
                      type: 'text',
                      text: jstTime.format('dddd, MMMM Do YYYY'),
                      size: 'md',
                      color: '#666666'
                    }
                  ],
                  margin: 'lg'
                }
              ],
              paddingAll: '20px'
            },
            {
              type: 'separator',
              color: '#E0E0E0',
              margin: 'xl'
            },
            {
              type: 'box',
              layout: 'horizontal',
              contents: [
                {
                  type: 'text',
                  text: 'üáπüá≠',
                  size: '3xl',
                  flex: 0
                },
                {
                  type: 'box',
                  layout: 'vertical',
                  contents: [
                    {
                      type: 'text',
                      text: '‡πÑ‡∏ó‡∏¢ (ICT)',
                      weight: 'bold',
                      size: 'lg',
                      color: '#333333'
                    },
                    {
                      type: 'text',
                      text: thaiTime.format('HH:mm:ss'),
                      size: '4xl',
                      weight: 'bold',
                      color: '#f093fb'
                    },
                    {
                      type: 'text',
                      text: thaiTime.format('dddd, MMMM Do YYYY'),
                      size: 'md',
                      color: '#666666'
                    }
                  ],
                  margin: 'lg'
                }
              ],
              paddingAll: '20px'
            }
          ]
        }
      }
    };
  }

  // Query Type Detection Methods
  isWeeklyWeatherQuery(message) {
    const weeklyKeywords = [
      '‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå', '‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå', '7 ‡∏ß‡∏±‡∏ô', '‡πÄ‡∏à‡πá‡∏î‡∏ß‡∏±‡∏ô', '‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏´‡∏ô‡πâ‡∏≤',
      'weekly', 'week', '7 days', 'seven days'
    ];

    return this.isWeatherQuery(message) && weeklyKeywords.some(keyword =>
      message.toLowerCase().includes(keyword.toLowerCase())
    );
  }

  isDetailedWeatherQuery(message) {
    const detailedKeywords = [
      '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î', '‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î', '24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á', '24 ‡∏ä‡∏°', '‡∏£‡∏≤‡∏¢‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á',
      'detailed', 'hourly', '24 hours', 'detail'
    ];

    return this.isWeatherQuery(message) && detailedKeywords.some(keyword =>
      message.toLowerCase().includes(keyword.toLowerCase())
    );
  }

  isWeatherQuery(message) {
    const weatherKeywords = [
      '‡∏≠‡∏≤‡∏Å‡∏≤‡∏®', '‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®', '‡∏ù‡∏ô', '‡πÅ‡∏î‡∏î', '‡∏´‡∏ô‡∏≤‡∏ß', '‡∏£‡πâ‡∏≠‡∏ô', '‡πÄ‡∏°‡∏Ü', '‡∏•‡∏°',
      '‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥', '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô', '‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå', 'weather', 'temperature', 'rain'
    ];

    return weatherKeywords.some(keyword =>
      message.toLowerCase().includes(keyword.toLowerCase())
    );
  }

  isTimeQuery(message) {
    const timeKeywords = [
      '‡πÄ‡∏ß‡∏•‡∏≤', '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', '‡∏Å‡∏µ‡πà‡πÇ‡∏°‡∏á', '‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ', '‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ', '‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô',
      'time', 'date', 'now', 'today', 'current'
    ];

    return timeKeywords.some(keyword =>
      message.toLowerCase().includes(keyword.toLowerCase())
    );
  }

  // Current Time Info
  getCurrentTimeInfo() {
    const jstTime = moment().tz('Asia/Tokyo');
    const thaiTime = moment().tz('Asia/Bangkok');
    
    return `üïê ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:
üáØüáµ ‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô (JST): ${jstTime.format('dddd, MMMM Do YYYY, HH:mm:ss')}
üáπüá≠ ‡πÑ‡∏ó‡∏¢ (ICT): ${thaiTime.format('dddd, MMMM Do YYYY, HH:mm:ss')}`;
  }

  // Response Validation
  validateResponse(response, fallbackText) {
    try {
      if (!response) {
        console.error('Response is null or undefined');
        return {
          type: 'text',
          text: `‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ${fallbackText}‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ`
        };
      }

      if (typeof response === 'string') {
        return {
          type: 'text',
          text: response
        };
      }

      if (typeof response === 'object') {
        if (response.type === 'flex') {
          if (!response.contents || !response.altText) {
            console.error('Invalid flex message structure');
            return {
              type: 'text',
              text: `‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ${fallbackText}‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ (‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)`
            };
          }
          return response;
        }

        if (response.type === 'text') {
          if (!response.text) {
            console.error('Text message missing text property');
            return {
              type: 'text',
              text: `‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ${fallbackText}‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ`
            };
          }
          return response;
        }

        if (!response.type) {
          console.error('Response object missing type property');
          return {
            type: 'text',
            text: `‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ${fallbackText}‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ`
          };
        }
      }

      return response;

    } catch (error) {
      console.error('Error validating response:', error);
      return {
        type: 'text',
        text: `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£${fallbackText}`
      };
    }
  }

  // Multimodal Processing Methods
  async processImageMessage(imageBuffer, userId) {
    try {
      console.log(`Processing real image analysis for user ${userId}`);
      
      const result = await this.multimodal.analyzeImage(imageBuffer, userId);
      await this.saveFileContext(userId, 'image', '‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á‡∏°‡∏≤');
      await this.saveConversationContext(userId, '‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û', result);

      return {
        type: 'text',
        text: `üñºÔ∏è ‡πÄ‡∏•‡πâ‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏•‡πâ‡∏ß:\n\n${result}`
      };
    } catch (error) {
      console.error('Image processing error:', error);
      return {
        type: 'text',
        text: `‚ùå ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏•‡πâ‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ: ${error.message}`
      };
    }
  }

  async processAudioMessage(audioBuffer, userId) {
    try {
      console.log(`Processing real audio analysis for user ${userId}`);
      
      const result = await this.multimodal.analyzeAudio(audioBuffer, userId);
      await this.saveFileContext(userId, 'audio', '‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á‡∏°‡∏≤');
      await this.saveConversationContext(userId, '‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á', result);

      return {
        type: 'text',
        text: `üéµ ‡πÄ‡∏•‡πâ‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡πâ‡∏ß:\n\n${result}`
      };
    } catch (error) {
      console.error('Audio processing error:', error);
      return {
        type: 'text',
        text: `‚ùå ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏•‡πâ‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ: ${error.message}`
      };
    }
  }

  async processVideoMessage(videoBuffer, userId) {
    try {
      console.log(`Processing real video analysis for user ${userId}`);
      
      const result = await this.multimodal.analyzeVideo(videoBuffer, userId);
      await this.saveFileContext(userId, 'video', '‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á‡∏°‡∏≤');
      await this.saveConversationContext(userId, '‡∏™‡πà‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠', result);

      return {
        type: 'text',
        text: `üé¨ ‡πÄ‡∏•‡πâ‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÅ‡∏•‡πâ‡∏ß:\n\n${result}`
      };
    } catch (error) {
      console.error('Video processing error:', error);
      return {
        type: 'text',
        text: `‚ùå ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏•‡πâ‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÑ‡∏î‡πâ: ${error.message}`
      };
    }
  }

  async processFileMessage(fileBuffer, fileName, userId) {
    try {
      console.log(`Processing real document analysis for user ${userId}: ${fileName}`);
      
      const result = await this.multimodal.analyzeDocument(fileBuffer, fileName, userId);
      await this.saveFileContext(userId, 'document', `‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£: ${fileName}`);
      await this.saveConversationContext(userId, `‡∏™‡πà‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£: ${fileName}`, result);

      return {
        type: 'text',
        text: `üìÑ ‡πÄ‡∏•‡πâ‡∏á‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ "${fileName}" ‡πÅ‡∏•‡πâ‡∏ß:\n\n${result}`
      };
    } catch (error) {
      console.error('File processing error:', error);
      return {
        type: 'text',
        text: `‚ùå ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏•‡πâ‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ "${fileName}" ‡πÑ‡∏î‡πâ: ${error.message}`
      };
    }
  }

  async processLocationMessage(lat, lon, address, userId) {
    try {
      const locationInfo = `‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: ${address || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'} (${lat}, ${lon})`;
      const weatherInfo = await this.weatherService.getWeatherByCoordinates(lat, lon);

      const prompt = `${this.getSystemPrompt()}\n\n‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏°‡∏≤: ${locationInfo}\n‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®: ${weatherInfo}\n\n‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ô‡∏µ‡πâ`;

      if (this.model) {
        const result = await this.model.generateContent(prompt);
        const responseText = result.response.text();

        await this.saveConversationContext(userId, `‡∏™‡πà‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: ${locationInfo}`, responseText);

        return {
          type: 'text',
          text: `üìç ‡πÄ‡∏•‡πâ‡∏á‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß:\n\n${responseText}`
        };
      } else {
        const fallbackResponse = `üìç ‡πÄ‡∏•‡πâ‡∏á‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß!\n\n${locationInfo}\n\n${weatherInfo}`;
        await this.saveConversationContext(userId, `‡∏™‡πà‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: ${locationInfo}`, fallbackResponse);
        
        return {
          type: 'text',
          text: fallbackResponse
        };
      }
    } catch (error) {
      console.error('Location processing error:', error);
      return {
        type: 'text',
        text: '‚ùå ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏•‡πâ‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ'
      };
    }
  }

  async processPostback(data, userId) {
    try {
      const prompt = `${this.getSystemPrompt()}\n\n‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ${data}\n\n‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å`;

      if (this.model) {
        const result = await this.model.generateContent(prompt);
        const responseText = result.response.text();

        await this.saveConversationContext(userId, `‡πÄ‡∏•‡∏∑‡∏≠‡∏Å postback: ${data}`, responseText);

        return {
          type: 'text',
          text: responseText
        };
      } else {
        const fallbackResponse = `‡πÄ‡∏•‡πâ‡∏á‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ${data}\n\n‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏£‡∏±‡∏ö!`;
        await this.saveConversationContext(userId, `‡πÄ‡∏•‡∏∑‡∏≠‡∏Å postback: ${data}`, fallbackResponse);
        
        return {
          type: 'text',
          text: fallbackResponse
        };
      }
    } catch (error) {
      console.error('Postback processing error:', error);
      return {
        type: 'text',
        text: '‚ùå ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏•‡πâ‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ'
      };
    }
  }

  // Memory Management Methods
  async saveConversationContext(userId, userMessage, aiResponse) {
    try {
      const conversationRef = this.db.collection('conversations').doc(userId);
      const timestamp = moment().tz('Asia/Tokyo').toISOString();
      
      const doc = await conversationRef.get();
      let conversations = [];
      
      if (doc.exists) {
        conversations = doc.data().messages || [];
      }
      
      conversations.push({
        userMessage,
        aiResponse,
        timestamp
      });
      
      if (conversations.length > 10) {
        conversations = conversations.slice(-10);
      }
      
      await conversationRef.set({
        messages: conversations,
        lastUpdated: timestamp
      }, { merge: true });
      
      console.log(`Saved conversation context for user ${userId} to Firestore`);
    } catch (error) {
      console.error('Error saving conversation context:', error);
    }
  }

  async getConversationContext(userId) {
    try {
      const conversationRef = this.db.collection('conversations').doc(userId);
      const doc = await conversationRef.get();
      
      if (doc.exists) {
        const conversations = doc.data().messages || [];
        
        const recentConversations = conversations.slice(-5);
        
        return recentConversations.map(conv => 
          `‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${conv.userMessage}\n‡πÄ‡∏•‡πâ‡∏á: ${conv.aiResponse}`
        ).join('\n---\n');
      }
      
      return null;
    } catch (error) {
      console.error('Error getting conversation context:', error);
      return null;
    }
  }

  async saveFileContext(userId, fileType, description) {
    try {
      const fileRef = this.db.collection('file_contexts').doc(userId);
      const timestamp = moment().tz('Asia/Tokyo').toISOString();
      
      await fileRef.set({
        type: fileType,
        description,
        timestamp
      }, { merge: true });
      
      console.log(`Saved file context for user ${userId}: ${fileType}`);
    } catch (error) {
      console.error('Error saving file context:', error);
    }
  }

  async getFileContext(userId) {
    try {
      const fileRef = this.db.collection('file_contexts').doc(userId);
      const doc = await fileRef.get();
      
      if (doc.exists) {
        const data = doc.data();
        const fileTime = moment(data.timestamp);
        const now = moment();
        
        if (now.diff(fileTime, 'hours') < 2) {
          return data;
        }
      }
      
      return null;
    } catch (error) {
      console.error('Error getting file context:', error);
      return null;
    }
  }
}

module.exports = LangAI;
