const { GoogleGenerativeAI, HarmCategory, HarmBlockThreshold } = require("@google/generative-ai");
const { getCurrentTime } = require("./time");

let EnhancedWeather;
try {
  EnhancedWeather = require("./weather-enhanced");
  console.log("‚úÖ EnhancedWeather imported successfully");
} catch (error) {
  console.error("‚ùå Failed to import EnhancedWeather:", error.message);
  EnhancedWeather = null;
}

class Gemini {
  constructor() {
    this.genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
    
    if (EnhancedWeather && typeof EnhancedWeather === 'function') {
      try {
        this.enhancedWeather = new EnhancedWeather();
        console.log("‚úÖ EnhancedWeather instance created successfully");
      } catch (error) {
        console.error("‚ùå Failed to create EnhancedWeather instance:", error.message);
        this.enhancedWeather = null;
      }
    } else {
      this.enhancedWeather = null;
    }
    
    const tools = [{
      functionDeclarations: [
        {
          name: "getCurrentTime",
          description: "‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô",
          parameters: {
            type: "OBJECT",
            properties: {
              timezone: { 
                type: "STRING", 
                description: "Timezone ‡πÄ‡∏ä‡πà‡∏ô 'Asia/Bangkok', 'Asia/Tokyo'",
                default: "Asia/Bangkok"
              }
            }
          }
        }
      ]
    }];

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° weather functions ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    if (this.enhancedWeather) {
      tools[0].functionDeclarations.push(
        {
          name: "getCurrentWeather",
          description: "‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô",
          parameters: {
            type: "OBJECT",
            properties: {
              city: { 
                type: "STRING", 
                description: "‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏∑‡∏≠‡∏á ‡πÄ‡∏ä‡πà‡∏ô '‡πÇ‡∏≠‡∏ï‡∏≤‡∏£‡∏∏', '‡∏≠‡∏∏‡∏™‡∏∂‡πÇ‡∏ô‡∏∞‡∏°‡∏¥‡∏¢‡∏∞', '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û'" 
              }
            },
            required: ["city"]
          }
        },
        {
          name: "get8DayForecast",
          description: "‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏® 8 ‡∏ß‡∏±‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤ ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡∏∞‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡∏ô‡πâ‡∏≤",
          parameters: {
            type: "OBJECT",
            properties: {
              city: { 
                type: "STRING", 
                description: "‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏∑‡∏≠‡∏á ‡πÄ‡∏ä‡πà‡∏ô '‡πÇ‡∏≠‡∏ï‡∏≤‡∏£‡∏∏', '‡∏≠‡∏∏‡∏™‡∏∂‡πÇ‡∏ô‡∏∞‡∏°‡∏¥‡∏¢‡∏∞', '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û'" 
              }
            },
            required: ["city"]
          }
        }
      );
      console.log("‚úÖ Weather function declarations added (current + 8-day forecast)");
    }

    const systemInstruction = `‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ "‡πÄ‡∏•‡πâ‡∏á" ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢ AI ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®

# ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏´‡∏•‡∏±‡∏Å
1. ‚è∞ **‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡πÄ‡∏ß‡∏•‡∏≤** - ‡πÉ‡∏ä‡πâ getCurrentTime ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
${this.enhancedWeather ? `2. üå¶Ô∏è **‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®** - ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ:
   - ‡πÉ‡∏ä‡πâ getCurrentWeather ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
   - ‡πÉ‡∏ä‡πâ get8DayForecast ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏® 8 ‡∏ß‡∏±‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤ (‡∏£‡∏ß‡∏°‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ)` : '2. üå¶Ô∏è ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ'}
3. üß† **‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞** - ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á

# ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠
${this.enhancedWeather ? `- **‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô**: "‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÇ‡∏≠‡∏ï‡∏≤‡∏£‡∏∏‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ" ‚Üí ‡πÉ‡∏ä‡πâ getCurrentWeather
- **‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏®**: "‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ", "‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡∏ô‡πâ‡∏≤", "‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÇ‡∏≠‡∏ï‡∏≤‡∏£‡∏∏ 8 ‡∏ß‡∏±‡∏ô" ‚Üí ‡πÉ‡∏ä‡πâ get8DayForecast
- **‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤**: ‡πÉ‡∏ä‡πâ getCurrentTime` : '- **‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤**: ‡πÉ‡∏ä‡πâ getCurrentTime'}

# ‡∏Å‡∏é‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
1. ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏π‡∏Å‡∏ñ‡∏≤‡∏°‡∏ñ‡∏∂‡∏á‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á ‚Üí "‡∏â‡∏±‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡∏á‡∏Å‡∏£‡πÑ‡∏á‡∏à‡∏∞‡πÉ‡∏Ñ‡∏£‡∏•‡∏∞ üêâ"
2. ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏π‡∏Å‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö "‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ", "‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡∏ô‡πâ‡∏≤", "‡∏´‡∏•‡∏≤‡∏¢‡∏ß‡∏±‡∏ô","‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏´‡∏ô‡πâ‡∏≤" ‚Üí ‡πÉ‡∏ä‡πâ get8DayForecast
3. ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏π‡∏Å‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö "‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ", "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ" ‚Üí ‡πÉ‡∏ä‡πâ getCurrentWeather
4. ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡∏™‡∏∏‡∏†‡∏≤‡∏û‡πÄ‡∏™‡∏°‡∏≠`;

    this.model = this.genAI.getGenerativeModel({
      model: "gemini-2.0-flash",
      systemInstruction: systemInstruction,
      tools: tools,
      safetySettings: [
        { category: HarmCategory.HARM_CATEGORY_HARASSMENT, threshold: HarmBlockThreshold.BLOCK_NONE },
        { category: HarmCategory.HARM_CATEGORY_HATE_SPEECH, threshold: HarmBlockThreshold.BLOCK_NONE },
        { category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT, threshold: HarmBlockThreshold.BLOCK_NONE },
        { category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT, threshold: HarmBlockThreshold.BLOCK_NONE },
      ]
    });
  }

  async multimodal(prompt, history = [], userId = 'unknown') {
    try {
      const startTime = Date.now();
      const chat = this.model.startChat({ history });
      const result = await chat.sendMessage(prompt);
      const response = result.response;

      const functionCalls = response.functionCalls();
      if (functionCalls && functionCalls.length > 0) {
        const call = functionCalls[0];
        
        if (call.name === "getCurrentTime") {
          const timezone = call.args.timezone || 'Asia/Bangkok';
          const timeData = getCurrentTime(timezone);

          const result2 = await chat.sendMessage([{
            functionResponse: {
              name: "getCurrentTime",
              response: timeData
            }
          }]);
          
          const endTime = Date.now();
          this.logUsage(userId, prompt, result2.response.text(), endTime - startTime, result2.response);
          return { text: result2.response.text() };
        }

        if (call.name === "getCurrentWeather" && this.enhancedWeather) {
          const city = call.args.city;
          console.log("üå§Ô∏è Calling getCurrentWeather for:", city);
          
          const weatherData = await this.enhancedWeather.getCurrentWeather(city);

          const result2 = await chat.sendMessage([{
            functionResponse: {
              name: "getCurrentWeather",
              response: weatherData
            }
          }]);
          
          const endTime = Date.now();
          this.logUsage(userId, prompt, result2.response.text(), endTime - startTime, result2.response);
          return { text: result2.response.text() };
        }

        // ‚≠ê ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ 8-day forecast
        if (call.name === "get8DayForecast" && this.enhancedWeather) {
          const city = call.args.city;
          console.log("üå¶Ô∏è Calling get8DayForecast for:", city);
          
          const forecastData = await this.enhancedWeather.get8DayForecast(city);

          const result2 = await chat.sendMessage([{
            functionResponse: {
              name: "get8DayForecast",
              response: forecastData
            }
          }]);
          
          const endTime = Date.now();
          this.logUsage(userId, prompt, result2.response.text(), endTime - startTime, result2.response);
          
          // ‡∏™‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á text ‡πÅ‡∏•‡∏∞ rich content
          return { 
            text: result2.response.text(),
            richContent: this.enhancedWeather.create8DayFlexMessage(forecastData)
          };
        }
      }
      
      const endTime = Date.now();
      this.logUsage(userId, prompt, response.text(), endTime - startTime, response);
      return { text: response.text() };
    } catch (error) {
      console.error("‚ùå GEMINI_ERROR:", error.message);
      throw error;
    }
  }

  logUsage(userId, prompt, responseText, latency, response) {
    const usageData = {
      timestamp: new Date().toISOString(),
      userId: userId,
      model: "gemini-2.0-flash",
      promptLength: prompt.length,
      responseLength: responseText.length,
      latency: latency,
      promptTokens: response.usageMetadata?.promptTokenCount || 0,
      responseTokens: response.usageMetadata?.candidatesTokenCount || 0,
      totalTokens: response.usageMetadata?.totalTokenCount || 0
    };
    
    console.log("ü§ñ GEMINI_USAGE:", JSON.stringify(usageData));
  }
}

module.exports = new Gemini();
